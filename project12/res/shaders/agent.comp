#version 430 compatibility

struct pos
{
	vec4 position;
	vec4 velocity;
	vec4 mass;
};

layout(std430, binding=1) buffer Pos
{
    pos points[];
};

uniform int PARTICLES;
uniform float dt;

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;
void main()
{
    const float DT = dt;//0.001;

    uint gid = gl_GlobalInvocationID.x;
    vec2 p = points[ gid ].position.xy;
	vec2 v = points[ gid ].velocity.xy;
	//float m1 = points[ gid ].mass.x;


	float G = 0.00000001;
	//vec2 a = normalize(-p)/50;
	
	vec2 a = vec2(0.0, 0.0);

	for (int i = 0; i<PARTICLES; i++)
	{	
		if (i == gid){
			continue;
		}
		vec2 p1 = points[ i ].position.xy;
		//float m2 = points[ i ].mass.x;

		//float m1 = points[ i ].mass;
		float r = distance(p1, p);
		if (r == 0){
			continue;
		}
		vec2 dir = normalize(p1-p);
		
		// if (r<0.001)
		// {
		// 	vec3 normal = vec3(0.0, 0.0, 1.0);
		// 	vec3 tangent = cross(vec3(dir, 0.0), normal);
		// 	vec2 tang = tangent.xy;
		// 	float prod = 1.0 - dot(dir, v)/(length(dir)+length(v));

		// 	vec2 v1 = points[ i ].velocity.xy;
		// 	float speed = (length(v1)+length(v))/2;
		// 	v = v - dir*speed/10;
		// 	//v = (v1+v)/4.0;
		// 	//v = prod*normalize(tang-dir)*speed;
		// 	points[i].velocity.xy = points[i].velocity.xy + dir*speed/10;
		// } else if (r > 0.01)
		// {
		r = max(r, 0.01);
		a = a + dir*G/(r*r);
		//}
	}
	//v = max(v, 0.01);

	
	
	vec2 vp = v + a * DT;
    vec2 pp = p + vp * DT - 0.5*a*DT*DT;

	// if (pp.x<-1)
	// {
	// 	pp.x=1;
	// 	//vp.x=vp.x*0.1;
	// }
	
	// if (pp.x>1)
	// {
	// 	pp.x=-1;
	// 	//vp.x=vp.x*0.1;
	// }
	// if (pp.y<-1)
	// {
	// 	pp.y=1;
	// 	//vp.y=vp.y*0.1;
	// }
	
	// if (pp.y>1)
	// {
	// 	pp.y=-1;
	// 	//vp.y=vp.y*0.1;
	// }
	//vec3 origin = vec3(0.0, 0.0, 0.0);

    points[ gid ].position.xy = pp;
	points[ gid ].velocity.xy = vp;
}